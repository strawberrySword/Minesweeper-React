{"version":3,"sources":["componets/Tile.js","componets/Board.js","componets/Header.js","App.js","reportWebVitals.js","index.js"],"names":["Tile","mine","onReavelMine","className","minesCount","onMouseDown","onContextMenu","Board","mines","map","row","i","j","e","Header","reSetBoard","style","backgroundColor","onClick","height","width","App","useState","settings","setSettings","board","setMines","useEffect","minesTest","generateMines","flagsPlaced","minesArray","mineTiles","n","Math","floor","random","isCordsInArr","push","isBomb","oldArray","newCords","cords","ReavelMine","newBoard","alert","minesLeft","y","x","minesCounter","length","countMines","isReaveled","tile","unvisitedNeighbors","GetUnvisitedNeighbors","neighbor","WinGame","newSettings","event","preventDefault","button","console","log","buttons","prevState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d8c45eab.chunk.js","sourcesContent":["const Tile = ({mine, onReavelMine}) => {\r\n    return (\r\n        <>\r\n            <div className={`tile ${mine.minesCount === \"ğŸš©\" ? \"\" : mine.minesCount === \"\" || \"number\"}`} onMouseDown={onReavelMine} onContextMenu={onReavelMine}>{mine.minesCount === 0 ? \"\" : mine.minesCount}</div>   \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Tile\r\n","import Tile from \"./Tile\"\r\n\r\nconst Board = ({mines, onReavelMine}) => {\r\n    return (\r\n        <div className=\"board\">\r\n            {mines.map((row, i) => (\r\n            <div className='row' key={i}>\r\n                {row.map((mine, j) => (\r\n                    <Tile key={j} onReavelMine={(e) => onReavelMine(e, mine)}  mine={mine}></Tile>\r\n                ))}\r\n            </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Board\r\n","const Header = ({reSetBoard ,mine}) => {\r\n\r\n    return (\r\n        <div className=\"header\">\r\n            <div className='display'> {mine > 0 ? mine : 0}</div>\r\n            <button className=\"btn btn-block\" style={{backgroundColor: \"green\"}} onClick={() => reSetBoard({height:9,width:9,mines:10})}>Beginner</button>\r\n            <button className=\"btn btn-block\" style={{backgroundColor: \"orange\"}} onClick={() => reSetBoard({height:16,width:16,mines:40})}>Intermediate</button>\r\n            <button className=\"btn btn-block\" style={{backgroundColor: \"red\"}} onClick={() => reSetBoard({height:16,width:30,mines:99})}>Expert</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import { useState, useEffect } from 'react'\nimport Board from './componets/Board'\nimport Header from './componets/Header'\nimport Timer from './componets/Timer'\n\nconst App = () => {\n\n  // TO DO\n  // Add Win Condition\n  // Option For Setting Difficulty\n  // Smarter Game Over\n  const [settings, setSettings] = useState({\"height\": 16, \"width\": 30, \"mines\": 99, \"minesLeft\":99, \"flagsPlaced\":0})\n  const [board, setMines] = useState([])\n\n\n  useEffect(() => {\n    const minesTest = generateMines(settings.width,settings.height, settings.mines)\n    setMines(minesTest)\n    setSettings({...settings, flagsPlaced:0})\n  }, []) \n\n  const generateMines = (width, height, mines) => {\n    let minesArray = []\n    for (var i = 0; i< height; i++){\n      minesArray[i] = []\n      for (var j =0; j < width; j++){\n        minesArray[i][j] = { \"isBomb\": false, \"isReaveled\": false, \"minesCount\": \"\", \"x\": j, \"y\": i}\n      }\n    }\n    let mineTiles = []\n    for (var n = 0; n< mines; n++){\n      i = Math.floor(Math.random() * height)\n      j = Math.floor(Math.random() * width)\n\n      while(isCordsInArr(mineTiles, [i,j])){\n        i = Math.floor(Math.random() * height)\n        j = Math.floor(Math.random() * width)\n      }\n\n      mineTiles.push([i,j])\n      // debugger\n      minesArray[i][j].isBomb = true\n    }\n    return minesArray\n  }\n\n  const isCordsInArr = (oldArray, newCords) => {\n    for (let cords of oldArray ){\n      if(newCords[0] === cords[0] && newCords[1] === cords[1]){\n        return true\n      }\n    }\n    return false\n  }\n\n  //return the amount of mines around a tile\n  const countMines = (mine) => {\n      let minesCounter = 0\n      let x = mine.x\n      let y = mine.y\n\n      // count the mines around the tile. need to check all 8 spots\n      if( y !==0 && x !==0 && board[y-1][x-1].isBomb ){\n        minesCounter ++\n      }\n      if( x !== 0 && board[y][x-1].isBomb ){\n        minesCounter ++\n      }\n      if( x !== 0 && y !== board.length-1 && board[y+1][x-1].isBomb ){\n        minesCounter ++\n      }\n      if( y !== board.length-1  && board[y+1][x].isBomb ){\n        minesCounter ++\n      }\n      if( x !== board[0].length-1 && y !== board.length-1 && board[y+1][x+1].isBomb ){\n        minesCounter ++\n      }\n      if( x !== board[0].length-1 && board[y][x+1].isBomb ){\n        minesCounter ++\n      }\n      if( x !== board[0].length-1 && y !==0 && board[y-1][x+1].isBomb ){\n        minesCounter ++\n      }\n      if( mine.y !== 0 && board[mine.y-1][x].isBomb ){\n        minesCounter ++\n      }\n      return minesCounter\n  }\n\n  const GetUnvisitedNeighbors = (tile) => {\n    \n    let unvisitedNeighbors = []\n    let x = tile.x\n    let y = tile.y\n\n    // count the mines around the tile. need to check all 8 spots\n    if( y !==0 && x !==0 && !board[y-1][x-1].isReaveled ){\n      unvisitedNeighbors.push(board[y-1][x-1])\n    }\n    if( x !== 0 && !board[y][x-1].isReaveled ){\n      unvisitedNeighbors.push(board[y][x-1])\n    }\n    if( x !== 0 && y !== board.length-1 && !board[y+1][x-1].isReaveled ){\n      unvisitedNeighbors.push(board[y+1][x-1])\n    }\n    if( y !== board.length-1  && !board[y+1][x].isReaveled ){\n      unvisitedNeighbors.push(board[y+1][x])\n    }\n    if( x !== board[0].length-1 && y !== board.length-1 && !board[y+1][x+1].isReaveled ){\n      unvisitedNeighbors.push(board[y+1][x+1])\n    }\n    if( x !== board[0].length-1 && !board[y][x+1].isReaveled ){\n      unvisitedNeighbors.push(board[y][x+1])\n    }\n    if( x !== board[0].length-1 && y !==0 && !board[y-1][x+1].isReaveled ){\n      unvisitedNeighbors.push(board[y-1][x+1])      \n    }\n    if( y !== 0 && !board[y-1][x].isReaveled ){\n      unvisitedNeighbors.push(board[y-1][x])\n\n    }\n    return unvisitedNeighbors\n  }\n\n  const ReavelMine = (mine) => {\n    const newBoard = board\n    if( mine.isBomb ){\n      //Game Over\n      alert(\"Game Over ğŸ’£\")\n      setMines(generateMines(settings.width,settings.height, settings.mines))\n      setSettings({...settings, flagsPlaced:0, minesLeft:settings.mines})\n      return \"ğŸ’£\"\n    }\n    newBoard[mine.y][mine.x].minesCount = countMines(mine)\n    newBoard[mine.y][mine.x].isReaveled = true\n    setMines(\n      [...newBoard]\n    )\n    if(mine.minesCount === 0){\n      let unvisitedNeighbors = GetUnvisitedNeighbors(mine)\n      unvisitedNeighbors.map(neighbor => ReavelMine(neighbor))\n    }\n  }\n\n  const OnTileAction = (event, mine) =>{\n    event.preventDefault()\n    if (event.button === 0 && mine.minesCount !== \"ğŸš©\"){\n      ReavelMine(mine)\n    }\n    if (event.button === 1){\n      // If You Want Here Is The Part Where You Add Middle Click\n      console.log(\"middle click\")\n    }\n    if(event.button === 2 && event.buttons === 2){\n      const newBoard = board\n      if( mine.minesCount === \"\" ){\n        newBoard[mine.y][mine.x].minesCount = \"ğŸš©\"\n        setSettings(prevState => { return { ...prevState, flagsPlaced: settings.flagsPlaced++} })\n        if(newBoard[mine.y][mine.x].isBomb){\n          setSettings(prevState => { return { ...prevState, minesLeft: settings.minesLeft--} })\n\n          settings.minesLeft === 1 && settings.flagsPlaced === settings.mines - 1 && WinGame() \n        }\n      }\n      else if( mine.minesCount === \"ğŸš©\" ){\n        setSettings(prevState => { return { ...prevState, flagsPlaced: settings.flagsPlaced--} })\n        newBoard[mine.y][mine.x].minesCount = \"\"\n        if(newBoard[mine.y][mine.x].isBomb){\n          setSettings(prevState => { return { ...prevState, minesLeft: settings.minesLeft++} })\n        }\n      }\n      \n\n      setMines(\n        [...newBoard]\n      )\n    }\n  }\n\n  const WinGame = () =>{\n    alert(\"You Won! âœ¨\")\n    setMines(generateMines(settings.width,settings.height, settings.mines))\n    setSettings({...settings, flagsPlaced:0, minesLeft:settings.mines})\n  }\n\n  const reSetBoard = (newSettings) => {\n    const newBoard = generateMines(newSettings.width,newSettings.height, newSettings.mines)\n    setMines([...newBoard])\n    setSettings({...newSettings, minesLeft:newSettings.mines, flagsPlaced: 0})\n  }\n\n  return (\n    <div>\n      <Header reSetBoard={ reSetBoard } mine={settings.mines - settings.flagsPlaced}/>\n      {/* <Timer></Timer> */}\n      <Board onReavelMine={OnTileAction} mines={board}/>\n    </div>\n  )\n}\n\nexport default App\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}